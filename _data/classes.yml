- topic: An introduction to algorithms
  abbrev: intro
  slides_link: 
  summary: |
    We begin the class by exploring the definition of computer
    science and by trying to write some basic algorithms.
  reading: None
  lab: None

- topic: Getting started with Scheme
  abbrev: racket-tech
  slides_link: 
  summary: |
    We consider Scheme, the programming language we will use
    throughout the course.
  reading:
    - page: /readings/mathlan.html
    - page: /readings/algorithm-building-blocks.html
    - page: /readings/scamper.html
  lab:
    - page: /labs/mathlan.html
    - page: /labs/scamper-intro.html

- topic: Algorithmic decomposition
  abbrev: decomposition
  slides_link: 
  summary: |
    We consider a key technique in algorithmic thinking, how one “decomposes” a
    more complex problem or algorithm into simpler ones.
  reading:
    - page: /readings/images.html
    - page: /readings/decomposition.html
  lab:
    - page: /labs/decomposition.html
  todo:
    - Check the images reading to make sure it works with the new model.

- topic: Reading and writing procedures
  abbrev: procedures
  summary: |
    We consider ways to write your own procedures and why you might do so.
    We also explore how one interprets the algorithms others write.
    And we develop some mental models for what happens when we run
    Scheme/Racket programs.
  reading:
    - page: /readings/procedures.html
  lab:
    - page: /labs/procedures.html

- topic: Computation via expressions
  abbrev: expressions
  slides_link: 
  summary: |
    We look at the fundamental building block of computation in functional
    programming languages, the expression, and build an appropriate model of
    how expressions "compute". 
  reading:
    - page: /readings/computation-via-expressions.html
    - page: /readings/mental-models.html
  lab:
    - page: /labs/mental-models-of-computation.html


- topic: Expressions and types
  abbrev: exprs-and-types
  slides_link: 
  summary: |
    We explore many of the basic types of values in Scheme, the
    capabilities Scheme provides for working with those types, and
    how one builds more complex expressions.  We also continue 
    building our mental model.
  reading:
    - page: /readings/exprs-and-types.html
    - page: /readings/numbers.html
    - page: /readings/strings.html
    # - page: /readings/symbols.html
  lab:
    - page: /labs/basic-types.html

  todo:
    - Consider adding symbols to the lab.
    - Consider which types reading to use (or combine them).
    - Might do some cleanup; we split numbers and strings in 2024Sp

- topic: Booleans, predicates, and conditionals
  abbrev: booleans
  slides_link:
  summary: |
    We consider how one writes procedures that make decisions.
  reading:
    - page: /readings/booleans.html
    - page: /readings/conditionals.html
  lab:
    - page: /labs/conditionals.html
  todo:
    - Last semester, we needed two days for this. I'm inserting a pause for breath

- topic: Lists
  abbrev: lists
  slides_link:
  summary: |
    We return to Scheme's *list* data structure and some ways to
    use lists to work with collections of data.
  reading:
    - page: /readings/list-basics.html
    - page: /readings/list-transform-generic.html
  lab:
    - page: /labs/list-basics.html
  todo:
    - Do we also include `car`, `cdr`, and `cons` here?  Do we
     perhaps include a separate day?

- topic: Processing lists
  abbrev: processing-lists
  slides_link:
  summary: |
    We explore ways to use lists to work with collections of drawings
    using "the big three" list procedures: `map`, `reduce`, and `filter`.
  reading:
    - page: /readings/list-big-three.html
  lab:
    - page: /labs/lists-more.html
  todo:
    - Incorporate sort and tally.
    - Consider incorporating the old /labs/drawing-lists.html

- topic: Style and List Processing Practice
  abbrev: higher-order-functions
  slides_link:
  summary: |
    We continue practicing list process with the "big three."
    Additionally, we also take the time to consider good style in programming.
  reading:
    - page: /readings/code-style.html
  lab:
    - page: /labs/wrangling-data.html

- topic: Software engineering fundamentals
  abbrev: software-engineering
  slides_link:
  summary: |
    We consider the trifecta of software engineering: documentation, testing, and debugging.  That is, we explore why and how you document your code, why and how you test your code, and how you might find errors in your code.
  reading:
    - page: /readings/documenting-your-code.html
    - page: /readings/unit-testing.html
    - page: /readings/hypothesis-driven-debugging.html
  lab:
    - page: /labs/documentation-and-testing.html

- topic: Pair programming
  abbrev: pair-programming
  slides_link:
  summary: |
    We explore the whys and hows of working with others.
  reading:
    - title: Diverse Teams Feel Less Comfortable -- and That's Why They PerformBetter
      resource: /files/DiverseTeams2016.pdf
    - title: How Pair Programming Really Works (Wray)
      resource: /files/PairProgramming.pdf
  lab:
    - (TBA)

- topic: Local bindings
  abbrev: let
  slides_link:
  summary: |
    We explore issues of redundacy in code and mechanisms for reducing such reducnancy.
  reading:
    - page: /readings/local-bindings.html
  lab:
    - page: /labs/local-bindings.html

- topic: Tables and Compound Data
  abbrev: tables
  summary: |
    We consider how to deal with compound data, such as the title, latitude, longitude, time, and date of an event.
  reading:
  lab:
  

- topic: Reading Lists and Tables from Files
  abbrev: file-lists
  summary: |
    We consider a variety of techniques for gathering lists and tables of data from files.
  reading:
  lab:

- topic: Thinking recursively
  abbrev: recursion-intro
  slides_link: 
  summary: |
    We begin our exploration of *recursion*, the most general form
    of repetition available in Scheme.  You can use recursion to
    both build and iterate over different kinds of values.
  reading:
    - page: /readings/thinking-recursively.html
  lab:
    - page: /labs/pattern-matching-and-recursive-tracing.html

- topic: Introduction to list recursion
  abbrev: recursion-intro
  slides_link:
  summary: |
    We begin our exploration of *recursion*, the most general form
    of repetition available in Scheme.  You can use recursion to
    both build and iterate over different kinds of values.
  reading:
    - page: /readings/pattern-matching.html
    - page: /readings/recursion-over-lists.html
  lab:
    - page: /labs/recursion-practice.html

- topic: Breather Day / Do we understand recursion??

- topic: List motions
  summary: |
    We continue to explore list recursion by examining how we use recursion to
    perform basic motions over lists.
  slides_link:
  reading:
    - page: /readings/list-motions.html
  lab:
    - page: /labs/more-list-practice.html

- topic: List Motions (continued)
  slides_link:
  summary: | 
    See above
  reading:
    - page: /readings/recursion-over-numbers.html
  lab:
    - (continue Monday's lab)

- topic: Recursion over numbers
  abbrev: number-recursion
  slides_link:
  summary: |    
    We consider a slightly different kind of recursion, numeric
    recursion.  In this technique, we once again have procedures
    call themselves.  However, the parameter that we "simplify" at
    every step is a number, rather than a list.
  reading:
    - (No required reading for today!)
  lab:
    - page: /labs/numeric-recursion.html


# currently where fall break hits

- topic: Higher-order Recursive Programming
  abbrev: higher-order-recursive-programming
  slides_link:
  summary: |
    We combine higher-order functions and recursive programming to implement the "big three" operations over lists. (Extra topic: Tail recursion -- We look at an advanced version of recursion that is ubiquitous in functional programming, tail recursion.)
  reading:
    - page: /readings/tail-recursion.html
  lab:
    - page: /labs/implementing-the-big-three.html
    - page: /labs/tail-recursion.html

- topic: Higher-order Recursive Programming
  abbrev: higher-order-recursive-programming
  slides_link:
  summary: |
    We combine higher-order functions and recursive programming to implement the "big three" operations over lists. (Extra topic: Tail recursion -- We look at an advanced version of recursion that is ubiquitous in functional programming, tail recursion.)
  reading:
    - page: /readings/association-lists.html
  lab:
    - page: /labs/implementing-the-big-three.html
    - page: /labs/tail-recursion.html

- topic: Breather / Catch-up day


- topic: Data Visulization
  abbrev: displaying-data
  summary: |
    We explore techniques for displaying simple kinds of data such as coordinate pairs or counts of categorical data.
  reading:
  lab:

- topic: Dictionaries
  abbrev: dictionaries
  slides_link:
  summary: |
    We consider how we might use list recursion to build structures that allow
    us to store information for quick retrieval.
  reading:
    - (Review association lists reading)
  lab:
    - page: /labs/letter-inventory.html

- topic: Vectors
  abbrev: vectors
  slides_link:
  summary: |
    We explore vectors, an alternative to lists for storing data.
  reading:
    - page: /readings/vectors.html
  lab:
    - page: /labs/vectors.html

- topic: Sequencing and effects
  abbrev: sequencing-and-effects
  slides_link:
  summary: |
    We discuss (finally!) what a side-effect is, why they are useful, and how functional programming (correctly) encourages us to moderate their use.
  reading:
    - page: /readings/sequencing-and-effects.html
  lab:
    - page: /labs/sequencing-and-effects.html

- topic: Randomness
  abbrev: randomness
  slides_link:
  summary: |
    We consider Scheme's `random` procedure and how one might use
    that procedure in generating language.
  reading:
    - page: /readings/randomness.html
  lab:
    - page: /labs/random-language.html

- topic: Files in Scheme
  abbrev: files
  summary: |
    We revisit files, considering the lower-level operations for working with files, a technique for structuring information that permits the information to persist across invocations of Scheme. Files also let our programs share information with other programs. 

- topic: Association Lists
  abbrev: association-lists
  summary: |
    We consider *association lists*, a simple, but useful, technique for organizing tables of information.
  reading:
  lab: 

- topic: Project kick-off
  abbrev: project-kick-off
  slides_link:
  summary: |
    We kick-off the final project, finalizing topics, forming groups, and building a plan of action!
  reading:
    - page: /readings/the-final-project.html
  lab: 
    - none

- topic: Structures
  abbrev: structs
  slides_link:
  summary: |
    We consider the `struct`, a way to define new types in Scheme.
  reading:
    - page: /readings/data-abstraction.html
    - page: /readings/preconditions.html
  lab:
    - page: /labs/structs.html

- topic: Trees
  abbrev: trees
  slides_link:
  summary: |
    We consider a common hierarchial mechanism for structuring data
    and how to realize it in Scheme.
  reading:
    - page: /readings/trees-ex.html
  lab:
    - page: /labs/binary-trees.html

- topic: Project work day!
  abbrev: project-work-day
  slides_link:
  reading:
    - none
  lab:
    - none

- topic: Tree recursion
  abbrev: tree-recursion
  slides_link:
  summary: |
    We consider how to write recursive programs that process trees
    and other tree-like structures.
  reading:
    - page: /readings/tree-recursion.html
    - page: /readings/binary-search-trees.html
  lab:
    - page: /labs/tree-recursion.html

- topic: Project work day!
  abbrev: project-work-day
  slides_link:
  summary: |
    Before Thanksgiving break, we pause to give everyone time to make substantial progress on their final projects.

- topic: Counting operations
  abbrev: counting-operations
  slides_link:
  summary: |
    We explore techniques for analyzing the number of calls made
    in evaluating procedures, particularly recursive procedures.
    We consider why such analysis is useful.  We then delve into
    a common problem: That of finding values in a collection.
  reading:
    - page: /readings/interactivity-events-and-reactivity.html
    - page: /readings/analyzing-procedures.html
  lab:
    - page: /labs/computational-complexity.html


- topic: "Case study: searching and sorting"
  abbrev: searching-and-sorting
  summary: |
    As a case study of looking at computational complexity, we examine different ways of performing two ubiquitous operations in programming, searching and sorting.
  reading:
    - page: /readings/searching.html
    - page: /readings/sorting.html

- topic: "Project presentations"
  abbrev: project-presentations
  reading: 
    - None
  lab:
    - None

- topic: "Presentation wrap-up and conclusion"
  abbrev: conclusion
  reading: 
    - None
  lab:
    - None

- topic: Final Quiz Makeup opportunity
  summary: Time and location TBD
  reading: 
    - None
  lab:
    - None

- topic: Final due date
  summary: The college will not allow you to turn in any work after 5pm on this day
  reading: 
    - None
  lab:
    - None
